// ############################################################################
// # Galen Lanphier                                                           #
// # https://github.com/lanphiergm/AdventOfCodeCS                             #
// # MIT License. See LICENSE file                                            #
// ############################################################################

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Text.RegularExpressions;

namespace AdventOfCode.Puzzles.Year2020
{
    /// <summary>
    /// Day 18: Operation Order
    /// https://adventofcode.com/2020/day/18
    /// </summary>
    [TestClass]
    public class Day18OperationOrder
    {
        /// <summary>
        /// Part 1 of the puzzle using sample input
        /// </summary>
        [TestMethod]
        public void Part1_SampleInput()
        {
            Assert.AreEqual(26457L, ExecutePart1(sampleInput));
        }

        /// <summary>
        /// Part 1 of the puzzle using my actual puzzle input
        /// </summary>
        [TestMethod]
        public void Part1_PuzzleInput()
        {
            Assert.AreEqual(14006719520523, ExecutePart1(puzzleInput));
        }

        /// <summary>
        /// Part 2 of the puzzle using sample input
        /// </summary>
        [TestMethod]
        public void Part2_SampleInput()
        {
            Assert.AreEqual(694173L, ExecutePart2(sampleInput));
        }

        /// <summary>
        /// Part 2 of the puzzle using my actual puzzle input
        /// </summary>
        [TestMethod]
        public void Part2_PuzzleInput()
        {
            Assert.AreEqual(545115449981968, ExecutePart2(puzzleInput));
        }

        /// <summary>
        /// Executes part 1 of the puzzle
        /// </summary>
        /// <param name="lines">The homework lines</param>
        /// <returns>The sum of the answers of all lines</returns>
        private static long ExecutePart1(string[] lines)
        {
            long sum = 0;
            foreach (string line in lines)
            {
                sum += EvaluateEqualPrecedence(line);
            }
            return sum;
        }

        /// <summary>
        /// Executes part 2 of the puzzle
        /// </summary>
        /// <param name="lines">The homework lines</param>
        /// <returns>The sum of the answers of all lines</returns>
        private static long ExecutePart2(string[] lines)
        {
            long sum = 0;
            foreach (string line in lines)
            {
                sum += EvaluateAdvancedPrecedence(line);
            }
            return sum;
        }

        /// <summary>
        /// Evaluates the expression using equal operator precedence
        /// </summary>
        /// <param name="line">The homework expression</param>
        /// <returns>The result of the expression</returns>
        private static long EvaluateEqualPrecedence(string line)
        {
            // Recursively evaluate all parentheses
            var parenthesisMatches = parenthesisRegex.Matches(line);
            while (parenthesisMatches.Any())
            {
                foreach (Match match in parenthesisMatches)
                {
                    line = line.Replace(match.Value, EvaluateEqualPrecedence(
                        match.Value[1..^1]).ToString());
                }
                parenthesisMatches = parenthesisRegex.Matches(line);
            }

            // Once all parentheses are evaluated, recursively evaluate each operation from left 
            // to right
            var operationMatch = operationRegex.Match(line);
            if (operationMatch.Success)
            {
                long a = long.Parse(operationMatch.Groups[1].Value);
                long b = long.Parse(operationMatch.Groups[3].Value);
                long value = operationMatch.Groups[2].Value == "+" ? a + b : a * b;
                if (line == operationMatch.Value)
                {
                    return value;
                }
                else
                {
                    return EvaluateEqualPrecedence(value.ToString() + 
                        line[operationMatch.Value.Length..]);
                }
            }

            return long.Parse(line);
        }

        /// <summary>
        /// Evaluates the expression with addition before multiplication
        /// </summary>
        /// <param name="line">The homework expression</param>
        /// <returns>The result of the expression</returns>
        private static long EvaluateAdvancedPrecedence(string line)
        {
            // Recursively evaluate all parentheses
            var parenthesisMatches = parenthesisRegex.Matches(line);
            while (parenthesisMatches.Any())
            {
                foreach (Match parenthesisMatch in parenthesisMatches)
                {
                    line = line.Replace(parenthesisMatch.Value, 
                        EvaluateAdvancedPrecedence(parenthesisMatch.Value[1..^1]).ToString());
                }
                parenthesisMatches = parenthesisRegex.Matches(line);
            }

            // Evaluate all addition expressions first
            var match = additionRegex.Match(line);
            while (match.Success)
            { 
                long a = long.Parse(match.Groups[1].Value);
                long b = long.Parse(match.Groups[2].Value);
                long value = a + b;
                if (line == match.Value)
                {
                    return value;
                }
                else
                {
                    line = line.ReplaceOnce(match.Value, value.ToString());
                }
                match = additionRegex.Match(line);
            }

            // Then evaluate all the multiplication expressions
            match = multiplicationRegex.Match(line);
            while (match.Success)
            {
                long a = long.Parse(match.Groups[1].Value);
                long b = long.Parse(match.Groups[2].Value);
                long value = a * b;
                if (line == match.Value)
                {
                    return value;
                }
                else
                {
                    line = line.ReplaceOnce(match.Value, value.ToString());
                }
                match = multiplicationRegex.Match(line);
            }

            return long.Parse(line);
        }

        private static readonly Regex operationRegex = new Regex(@"(\d+) ([\+\*]) (\d+)");
        private static readonly Regex additionRegex = new Regex(@"(\d+) \+ (\d+)");
        private static readonly Regex multiplicationRegex = new Regex(@"(\d+) \* (\d+)");
        private static readonly Regex parenthesisRegex = new Regex(@"\([^\(\)]+\)");

        #region Data

        private static readonly string[] sampleInput =
        {
            "1 + 2 * 3 + 4 * 5 + 6",
            "1 + (2 * 3) + (4 * (5 + 6))",
            "2 * 3 + (4 * 5)",
            "5 + (8 * 3 + 9 + 3 * 4 * 3)",
            "5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))",
            "((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"
        };

        private static readonly string[] puzzleInput =
        {
            "2 * 9 + 5 + ((8 + 6 + 5) * (2 + 3 * 9 + 3) + 5) * (7 + 9 + 7 + 3 * 7) * 5",
            "7 + (2 + 8 * 8 * 2 + (4 * 3 * 9 + 4 * 4)) + 4 * 3",
            "6 + 9 * 2 * 2 + (2 + (7 * 6 * 6) + 4 * (7 * 8 * 2 + 4) * 7) + 7",
            "2 + ((3 * 6 * 5 * 4 + 7 * 7) + 5 * 4 * 5 * (8 * 7 + 9) + 8) * (4 + 6 * 5)",
            "(7 * 6 * 3 + 4 * 3 * 9) + (6 * 6 * (4 + 6 + 4) + 7 + 2 + (9 * 8 * 9 + 9 * 7 * 4)) + (3 * 4 + 3 + 2) * 8",
            "(3 + (7 * 7 + 9 * 9 * 6)) * 3 * 5 + 4 * 8",
            "8 + 9 * (2 + 2 * 5 + 9 * 2) * 2 + ((6 + 4) * 4 + (4 * 7 + 3 * 3 + 7) * (4 * 5 + 8 + 8 + 7 * 6) + (6 + 2) + 5)",
            "(2 + 2 * 9 * 7) * ((9 + 8) * 3 * 6 + 6 + (5 * 4 * 4 * 3)) + 9 + (3 + 2)",
            "2 + 7 * 3 + ((7 + 7 * 3) * 6 + 8)",
            "2 + 7 + 6 + (4 + 7 * 7) + 9 * 2",
            "(9 * 2 * 4 * 4) + 4",
            "8 + (8 + 8 + 7) * (5 * 4 + 4 + 5 * 5) * 9 + 8",
            "(6 * (4 * 2 + 4 + 7 + 4) + 4 * 7 + (7 + 5 + 3 + 3 * 7) * 6) * 6 + 3 + 6 + 5",
            "5 + ((7 * 3 * 2) + 9 * (9 + 2) * 6)",
            "(3 * (2 * 2 * 3 * 7 * 2) * 8) * 8",
            "((3 + 2) + 5 + 7 + 3 * (8 + 4 + 5 * 8 * 9)) + 7 * 3 * 6",
            "7 * 6 + 8 * 4 + ((7 + 5 + 2 + 4 * 9 + 9) * 7 + 5)",
            "6 * (6 * (4 + 8 + 6) * 6)",
            "4 + 3 + (6 * (2 * 8))",
            "(2 * 8 * (3 + 8 + 3 + 2) * (8 * 4 + 2 + 8) * 9 + 7) * 8",
            "4 * (3 + 9) + 9 + 4 + 8 + 4",
            "((6 + 3 + 5 + 6 + 6) * 9 * (2 + 7 * 4 * 9 + 3 * 7) + 6) * (3 * 9 + 2 + 7 * 3) * 6",
            "8 * (5 + 4 * 3) + 3 * 7 + 6 * 4",
            "4 + 6 + 6 + (4 + 9 + 3 + 3 + 3) + (2 + 6 * 2 + 3 + 4) * (2 * 4 + 9 + 3)",
            "7 + (3 + 2 * 4 + 4 * 9 + 2) * 2 * ((8 * 6 + 6 * 2 + 7 + 7) + (2 + 8 * 7 + 6 * 9) + 7 * 6) * 7 + 8",
            "3 * (8 * 7 * (5 + 2 + 8 * 9))",
            "6 * 9 + 2 + 8 + (4 * 3 * 4 + 6)",
            "(2 * 6) + 7 * 9 + (3 * 9 + 8 * 4 * 3 * 5) * (9 * 7)",
            "5 * 2 + (3 + 5 * (5 + 7 + 7 + 4) * 2)",
            "9 + 4 * (8 + 3 * 2 + 9 * 6 * 4) * 9 * 6",
            "6 + (6 * (2 * 5 * 4 * 7 * 3) * 9 + 4 + 6 * 3) + 4 * 8",
            "(6 + (4 * 7) + 6 * 5) + 4 + 7 + 2",
            "3 + 4 * 9 + 9 * 8 + (3 * 4 + (9 * 6 * 9 * 2) * 5 + 8)",
            "8 + (3 + (9 * 3) + (6 * 4) + 8 * 6 + 8) + 5",
            "(7 + 6 * 3) * 2 + 5",
            "6 + 6 + ((6 + 7) * 9 + 5) * 2",
            "(3 * 3 * 2 * 5) + 9 * 9 + 3",
            "(8 * (6 + 2) + 4) * 9",
            "(4 * 6 * 6 * 3) * 9 * 4 + 4 * 4 * 9",
            "5 * 5 + ((8 * 9 * 2 + 5) + (3 + 7 * 5 + 2) + 2 + 8 + 5)",
            "9 + 8 * (6 + 2 * 2) + 7 + 4 * 9",
            "7 * 8 + (9 + (9 + 4 + 6 * 6 * 9 * 6)) * 8 * 5",
            "9 * 7 + 8 + 7 * (4 * 2 + (6 + 3 * 4 + 6 * 6 + 6) * 2) + 9",
            "8 + 2 + (4 * 3) + (2 + 8) * 5 * 7",
            "2 * 7 * 7 * 8 + (3 * 4 * (7 * 4) + 5 * 8)",
            "2 * ((6 + 7 + 6 + 2) * 4 + (9 + 4 * 5) + 8 + 6 * 7)",
            "(6 + 4 * 4 + 9 * (4 + 9 * 5 + 9 + 9 * 9) + 7) * 2",
            "8 + 9 * (4 + (6 + 4 * 3 * 6 * 6) + 7 + (6 * 2 * 8) + (9 + 5 * 3 + 3 * 3) * 9) * 9 * 4",
            "(8 + 8 * 9 + 9 + (7 + 8 * 3)) * (6 + 4 * 7)",
            "2 + (6 * 3 * 5 * 5) + 4 + 9 + (4 + 9 + 9) + 4",
            "8 + 3 + 8 + (4 + 6 * 6 * 2 * 5) + 5 * 5",
            "2 * 4 + (7 + 6 + 9 + 5 + 9 + 2)",
            "(5 * 5 + (5 + 7 + 4 + 3 + 7) * 4) + ((6 * 4) + 2 * (8 + 8 + 4 * 4) * (7 * 7 * 2 + 3) + (8 + 6 + 8 * 2 * 8 + 8)) * 7",
            "3 * 4 * (7 + 6 * 4 + 6 * 3) * 4 + 4 + ((8 * 6 + 2 + 5 + 7 + 6) + 6)",
            "9 + (9 * 7 + 2 * 9) + 8 + 6",
            "4 + 6 + 7 + 6 * 3",
            "5 * ((4 + 4) + 4 + 7 * 9) * 6",
            "9 * 6 + 6 + (4 + (5 + 9 + 2 + 9 * 5 + 8) * 4 * 8 * (3 * 4 + 7 * 6 * 3) + 7) * (4 + 4 * (6 + 7 * 6 * 7 * 9)) * 5",
            "6 + (2 + 4 + 6 + 6 + (8 * 7 * 2 + 6)) + 5 + 9 + 2 + (8 * 7 * (9 + 8 * 6 * 6 * 7 * 3))",
            "6 + 9 + 7 + 8 + (8 * 6 * (5 + 5 * 7 + 3) * 8 * (4 + 8 * 2 + 9))",
            "(9 + 3 + 8 + 4 + 8 + 4) * 6 * 3 * 6",
            "5 * ((5 + 7 + 2 * 3 + 4 + 3) + 3) + 6 + 4",
            "2 * (8 * 4 + (9 * 3) * (7 + 2 + 3 * 4) * 7) * (6 + 9 + 7) + 5 + 4 + 7",
            "9 * (9 * (8 * 9 + 5 * 3 * 2) + (9 + 7 + 8 * 8) * (9 * 7 + 6)) * 3 * 3 + 8 * 6",
            "5 * ((2 + 5) * (8 + 2 * 6 + 6 + 3) + 9 + 3 + 9) * (7 * 4) + (3 * 7 + 8 + 5 + 2 + (7 * 7 + 6)) + 4 * 7",
            "(2 + 8 + 6 + 6 + 8 + 3) + 5 + (5 + 7 * 8 * 5 + 5 * (2 * 4 * 2 + 2 + 6))",
            "5 + 6 + (9 * 7 * (6 * 8 * 4 + 7 * 2 * 4) + 3 * 5) + 4 + (2 * 4 * 6 * (9 + 6 + 7))",
            "5 + 6 * (7 + 5 * (4 * 3 * 9))",
            "6 * 8 + 4 + (2 + 8 * 6 * 2 + (5 + 9) * 3) + 6",
            "(7 + 5) * 7 + 5 * (6 + 4 * 9 + 6 * 2)",
            "9 * (9 + (5 + 9 * 7 + 7 * 2 + 2) * 9 + 8 + 5 * 6) + (5 + 5 * (2 + 4 + 7 + 9 + 6) + 2) * 9 * (3 + 5 + (8 + 2 * 2 + 7 * 7 * 6))",
            "7 * (7 + 3 * 8 * 9 * 9 + (5 * 2)) + 5",
            "9 * 9 * (8 + 3 + (2 + 9 + 6 + 6)) * 4 + 2 + (2 + 9 + 6)",
            "((9 * 4 * 9 * 3 + 2 * 5) + (7 + 2 * 4 * 3 * 6 * 8) * 7) * 3 * 9",
            "(3 + (8 + 6 * 6 * 5) + (3 * 5 + 8 * 5) + 7 * (2 + 3 * 7)) + (8 * (6 * 8 * 5 + 8 * 2)) + 8",
            "4 * 4 + 5 * 8 * (2 * 2 + 8) * 8",
            "7 * 8 + (5 * 4) * 7 + 2 + 9",
            "((4 * 9) * 4 * 8 * (4 * 6 * 5 * 2) * 5 + 9) + 7 * 2 + 8",
            "((4 * 3 * 9 + 7 * 7) * (7 + 3 + 7) + 9 + 6 + 8 + (3 + 2 * 6 * 2 * 9)) * 2 + (7 + (9 * 9) + 6) * 3 + 6",
            "8 + (9 * 8 + (2 + 3 * 3) + 4 + 4 + 4) + 4 * (5 * 4 + 4 * 6) * 7 + 8",
            "9 + 8 * ((2 * 5 + 7 * 2) + 3 * 4 * 3 * 8 * (2 * 6 + 6 + 3 * 5 + 6)) + (8 + 9 * 8 * 2 * 3 * 9)",
            "8 + (9 * (8 * 5))",
            "(5 * 4 * 9 * 3) + 7 + (3 + 7)",
            "3 * (2 * 8 + 2 * (8 * 3 * 8 + 8)) * 7 + (6 + 7)",
            "3 + 4",
            "2 * 8 + ((8 + 9 + 6 * 7 * 4 + 5) + 2 + (5 * 2 + 8)) * 4 + 2",
            "2 + 5 * 7 * 4 * (3 + 9 * (4 + 5 * 7) + 4) + 5",
            "5 + 7 * (6 * 9 + 9 + 5 * 3) + 8",
            "4 + (8 + 6 + 5 + 5 * (2 + 6) * 5)",
            "5 * 4 + 3 + ((4 * 5 * 7 * 6) + (7 * 7 + 6 + 8 * 9 + 4) + 5 + 2 * 7 * 5)",
            "9 * (8 + (4 + 9 * 8 + 7 * 3) + 3 * 9) + (7 * 7 + 5 * (5 + 7 + 3 * 9))",
            "4 * 6 + (2 + 6)",
            "6 + 2 * 2 + 4",
            "4 + 9 * 7 * (2 + 5 * 4) * 9",
            "(2 + 4 * (2 * 9 * 4 * 8 + 5 + 4)) + 4 + (8 * 7) + 7 + (3 + 5 * 7)",
            "9 * 8 * 8 * (6 + 6 * 2 + 5 * 7 + 3) + 6 + 8",
            "(3 + 9 + (7 * 2 + 2 + 3 + 2)) + (4 * 6)",
            "((6 + 3) + 3 * 8 + 7 * 7 + 8) + (9 + (8 * 6 + 7) + 2 + 5 * 4) + 5 + 3",
            "8 * ((5 + 2 * 9 + 2 + 7) * 7 * 7 + 7) * 4 + 8 + (4 * (3 * 9 + 3) + (2 * 9 * 4 * 9 * 7 + 6) + 6) * (8 + (2 + 5 * 3 + 8) + 4 + 8)",
            "5 + 4 + 7 * (4 + (5 * 5 + 3 * 3 + 8 + 7) + 3 + 8 * 6)",
            "((9 + 5 * 5 * 6 + 4) + (2 + 2) * 2) * (9 * 9 + 7 * 7 * 6) + 9 + 6 + 2 + (9 * (5 * 9) + 3 * 5 * (5 * 2 * 4 * 7))",
            "2 * (9 * (5 + 9 * 2 * 9) * 9 + 6) * (2 * 6) * 5 + (3 + 9 + 4 + 6 + (4 * 5 * 7 + 6) + (6 + 7)) * 7",
            "3 * 8 * 8 * 9 * 2 + 3",
            "6 * 8 * 6 + (2 + 7) + 5",
            "(6 * (3 * 4 + 6 + 9) * (2 + 8 + 3 * 8 + 3 * 2)) * 7 * 9 * 7",
            "8 + (4 + 9 + 2 + 9 * 2 + 9)",
            "5 + 7 + 6 + ((2 * 2 + 7 + 3 + 9) + 2 + 8) * 7",
            "(3 * 2) * 2 * 7 * 5",
            "9 + ((4 * 3 + 3 * 6 * 2 * 9) * 5 * 7 * 3) * 4 * 7 * 2",
            "(2 * 2 + 9 + 7) + (6 + 4 * 9 * 5) + 6 * 8 * 3 + 8",
            "8 * 8 + (7 * 9 + 6 * 7 * (2 * 2) * (4 + 2 + 8 * 2 * 3)) + 4",
            "(3 * (7 * 9 * 6) + 2 + (2 * 6)) * (4 * 3 * 7)",
            "2 + (2 * (6 + 9 + 9 * 6)) * (7 + 7 * 3 + 8) + 7 + 3",
            "9 + (5 * 2 + (8 * 4) * 7 * 5) + 9 + 4",
            "2 + 4 * 4 + 8 * 3 + 5",
            "8 * 2 * (8 * (7 * 3 * 5 + 7) * 5 + 6 * 4 + 9) * 8 * 2 * 8",
            "((7 + 4) + 7 * 3 + 6 * (3 + 6 + 8) * (5 + 4)) * 2 * (7 + (2 + 3 * 5) * 5 + 3 + 6) * ((6 + 3 + 4 + 2 + 3) + 4 * (3 * 7 + 2))",
            "(2 + (3 * 8 * 2)) + 2 * ((3 + 6 + 3 + 7) * 5 * (9 * 2 + 6 + 7 + 3))",
            "(6 + (7 * 2 + 4 * 9 + 5 * 2) + 4 + 8 * (4 * 8 * 5 + 7) + 9) * 7 + 2 * 9",
            "2 + (6 + 4 * 2 + (7 * 2)) * (8 * 6 + 6 * 4 + 5 * (5 * 4 + 9))",
            "(6 * 3 + (5 * 8 * 4 + 7)) + 7 * 7 + 9 + 9 + 7",
            "(2 * 9 * 7 * 5 * 7 + 5) * 8 + (8 * (9 + 9 * 8) * 7) * 4 + 5",
            "6 + (3 + 8 + 4 + 9 * 7)",
            "4 * 8 + 2",
            "((8 * 8 + 4 + 9) + 9 * 7 + 8) * 8 * (5 + 7 * 5) * 2 + ((3 * 2 + 6 + 6 * 3) * 8 + 9 * 9 * (9 * 6)) + (4 * 8 * (5 + 8 * 5 * 8) * 6 * 9 + 8)",
            "(3 * 6 * 7) * (4 + 8) + 9",
            "6 * ((9 * 3 * 4 + 9 * 2) + 7 + 2 * 6)",
            "6 + (7 + 8 + 2 * 5 * 2) * 7 + (5 + 3) * 7",
            "7 + ((6 * 8 * 6 * 3) * 9 * 3) + 9 + ((3 + 4 * 2 * 6) * 4 * 3) + 5 + 3",
            "(4 + 3 * (5 * 2 * 2)) + 5",
            "4 * 3 * (6 * (4 + 3 + 9 * 3)) + (4 * 2 * 5 + (9 * 2) * (6 + 8 + 9 + 6 * 8 + 8) + 2) + 6 + 8",
            "7 * 5 * 9 + 7 + (5 * (9 + 8 + 3 * 6 * 3)) * ((3 + 5) * (7 + 9 + 3 + 6 * 2) * 3 + 9)",
            "((3 + 3 * 9 + 4 * 8 * 2) + 6) + 2 * (5 * (2 * 5 * 7 + 8 + 6) * 2 + 8 + 3 + 6) + (4 + 6 + 4)",
            "(2 * 8 + 8 + 4 + 3 + 5) + 7",
            "6 + (6 * 5 * 9 * 6)",
            "8 + 2 + 6 + 3 + (9 + 6 + (7 * 3) + 5 + 4 + 8)",
            "6 + 7 * (3 * 7 * 5 + (9 + 6 + 6) * 7) * (3 + 4 + 7 * 4 + 6) * 4 * 4",
            "9 * 9 * (4 * 4 * (3 * 2 * 2 + 4 + 7 * 3) * 7 * 5 + (7 * 4)) + 5",
            "9 * ((6 + 3 * 6 + 2) + 4 * (9 * 8 + 8)) + 5 * 6 * 4 + 4",
            "(8 * 9 + (8 + 5 + 8 + 5 + 3)) + 3 + 6 * 4 * 2 * 4",
            "8 + (3 * 6 * 7) * 4 * 4 * 3",
            "(6 * 8 + (2 * 2 + 3 * 8) + 6 * (4 * 9)) * 6 * (2 * 8 + 7 * (8 + 9 + 6 * 9 + 3 + 3))",
            "3 + 8 * 2 + (8 * 3)",
            "4 + 3 * 2 * (5 + 3 + 5 + (6 * 5 * 3 * 6 * 6)) + 9 + 7",
            "(3 + 5 + (3 + 9 + 9 + 7) * 7 * 6) + 7 * 5 * (5 + 3)",
            "2 + ((7 + 2 + 9 + 2 + 6) * 3 * 2 * 5 * 5 + 2) + 2",
            "6 * 8 * (2 + 4 * 9 * 5) + 9 + 3",
            "4 * (6 + 9)",
            "5 * 2 + 3 * 2 * (5 * 3 * 9 * 7 + (6 + 4 * 5 + 6) * (6 * 2 * 2)) * (9 + 6 + 9 + (8 + 9 + 9))",
            "5 + (4 * 4 * 5 * (4 * 2 * 4 * 2) * 7) * 2",
            "3 * 2 + ((4 * 6 * 8) + 9 * (3 * 9 * 8 * 2))",
            "(3 * 5 + 6 * 8) + 5 + ((2 + 9) + (3 + 4 * 2 * 5 * 3) + 4 + (3 * 7)) * 6",
            "6 + 3 + 2 + 4 + (6 * 2 + 6 + 4) * 2",
            "(5 + (5 + 6 + 7 * 2) + 7 + 4 * 5) + 5 * 6 * 9",
            "4 * 7 * (3 * 2) + 4",
            "(5 + 4 + (8 + 3 + 7 * 2)) * (6 + (5 + 7 + 3 * 8 + 4) * 5 + 6 * 6 * 5) + 7",
            "2 * 5 + (5 + 4 + 3) + (9 * 3 + (7 * 6 * 9 * 4 * 3 * 2)) * 3 + 2",
            "(8 * 2 + 3) + 5 * 2 * 9 + 9 + (3 + 4)",
            "9 + 6 * ((4 * 7 * 9 * 5 * 4 * 5) + 8 * 8 * 7) * 7",
            "5 * 4 + ((3 + 2 * 5 * 6 + 7) + 7) + 2",
            "3 * 9 + 4 * 9",
            "9 + 7 + (7 + 5 + 3 * (5 + 7 * 8 * 7 + 5 + 7)) + (7 * 6 + 5 * 8) + (8 + (2 + 3 * 3 + 4) + (6 * 9 * 9) * 8) * 6",
            "8 * (2 * 7 * 3 * 4) + 9 * 3 + 7",
            "6 + (8 + (7 + 5 * 8 * 5) + 5 * 6 + (8 * 6) + 6) * 3",
            "7 + 3 * 4 * 6 + 9",
            "8 + 8 + ((8 * 9 + 6 + 3 * 9) + 3 + 4 * 8)",
            "9 + 4 + 6 + 3 + 2 + (2 * 6 + 8 + 3)",
            "(5 * 2) + 4 + 7 * 9 + (5 + 5 + 3 * 5)",
            "5 * 5 * 2 * 5 + (9 + 7 + 5)",
            "(2 * 5) + 7",
            "5 + 7 * 9 + 3 * 5",
            "(8 * 7 + 9 * 5) + 3 * (6 * 5 + (2 * 7 * 2 * 7 + 7 * 2) + 4) + 3",
            "(6 + 6 + 6 + 9) + 9 + (3 * 5 + 4 + (6 * 3) * 4) * 3 + (8 + 7 * 5 * (3 * 3) + 6) * 3",
            "((2 * 8 * 3 + 2 * 6 * 5) * 5 + (7 * 3 + 5 + 6 * 9 * 4) * (5 * 6 + 8 + 4 * 7 * 5)) + 6 + (9 * (9 + 7 * 8 * 3) + 7 * (5 * 9 + 6 + 5 + 4 + 8) * 8 + 8) * 5",
            "2 * (5 + 2 * 2 * 3 + (4 + 3)) * (6 + 6 + 2 * 9 + 9 * 3) * 8 * 8",
            "9 * (9 + 3 + 8 + 5) * (2 * 5 * (6 + 8) * 9) * (4 + 3 * 8 * 9 * 4 + 4) * (3 * 9 * 8 + (6 * 6 + 9 + 5) + 2 * (8 + 2 * 7))",
            "2 * 5 * 9 * 8 * ((7 * 2 * 3) + 3)",
            "2 * (6 * 7 * 2 * 4 + (5 * 4 + 7 + 3 + 7) + 5) * (7 + (6 + 3) * (8 + 8) * 3 * (5 + 2)) * 3 * 8 * 7",
            "2 * 5 * (4 * 9 + 2 + 5 * 2) + 6 * 5 + (6 * 6 * 4 * 8 * 4)",
            "4 + 8 * 4 + 4 * 3 + (7 + 2 * 2 * 5 * 2 + 8)",
            "(8 * (4 + 5 + 9 * 9 + 8) * 4 + (8 + 7 + 9 * 4 * 4 + 3)) * 7 * 8 * 3",
            "8 * 9 + ((2 + 5 + 8 * 9 + 5) + 2) * 7 * 4 + 5",
            "3 + (5 * 8 * 6 * (7 + 4 * 2 + 2 * 4 * 2) + (9 + 6) * 9) + 4",
            "9 * 7 + 4 + (7 + 9 + (9 * 9 + 8 * 4 * 5 * 8) + 5) + 3",
            "2 * 2 + 6 + (3 * 9 + 6 + (4 * 4 * 6 + 2 * 5)) * 5",
            "6 * 3 * (3 + 8 * 7) + 9",
            "7 * 2 * 6 * (3 * 3 * 8 * (2 + 7 * 9 + 8))",
            "9 * 7 + 6 * (7 * (3 + 6 + 7) + 3) + (9 * 6 + (2 + 9 * 3) + (7 * 8 * 8 + 6 * 3 * 5) * 9)",
            "3 * 4 * 4 * 6 + 2 + (6 * 3)",
            "4 * (5 + 7) + 8",
            "5 * 3 * 9 + 9 + 9 * 2",
            "8 + (8 * 9) * 7 + 6 * 9",
            "9 + 9 * (3 * 8) * 3 + 2",
            "6 + (8 + 6 + 2) * (9 * 9 * 8)",
            "5 + 4 * 3 + (2 * 2 * (2 + 3 + 4 + 7 * 3) + 5 + 3) + 6",
            "9 * 2 + 3 * 8 * 9",
            "5 * 2 * 7 * ((5 + 6 * 4 + 6 + 3 + 5) * 7 + 9 + 4) * (7 + 3 * 7)",
            "2 + ((5 + 3 * 4 + 2) * 2 * 6 + (8 * 8 + 8) * 3 * (3 * 8 * 5 * 6 + 5))",
            "5 + (6 + 9 + 4 + (3 * 7)) * (4 + 6 * 5 * (7 + 8 * 3 + 3 * 9) + (9 + 8 + 3))",
            "4 * 2 + 9 + (9 * 6 * 9 * (9 * 4 + 3 * 2 * 6 + 8) + 7 + 9) * (5 + 7 * 9 * 5) + (8 + 9 + 4 * 5 * 8)",
            "7 + 8 * 3 + (5 + 2 * 2 + 6 * 8) + 7",
            "8 + ((9 * 7 + 5 * 8 + 3 + 6) * 4) + 6 * 4 + 4 + 3",
            "(6 + 2 + 4 + 7) * (2 + 6 * 7 * (4 * 3 + 9 + 5 * 5) + 5 + (2 + 3 * 5 * 5 * 6)) * 2",
            "(6 + 9) + 4 * 9",
            "4 * (4 * 5 + 9 * (9 + 5 * 7 * 6 * 7 + 9))",
            "2 * 5 + ((7 + 3 * 3 * 9 + 8 + 4) * 4 * 6) + 3 + 6 + (4 + (2 * 7) + 5)",
            "(7 + (4 * 5 + 2 + 2 * 2 + 8)) * 5 + 5 + (3 + 8 + 6 * 6) * 9",
            "5 + 4 + 4 + 7 * (2 + 6 + (3 + 6 + 7) + 6 * 9) * (2 + 8)",
            "8 + ((4 * 3 * 2) + 4) + 5 * 7 * 3 * 5",
            "4 * 4 + 9 + (8 + (6 * 5 * 2 + 8 * 3 + 8) + 4 * (2 + 6 * 2 + 4 + 3 + 2) * (4 + 5))",
            "(9 + 8 * 8 + (5 * 8 * 7 * 8 + 9 * 6)) * 9 + 5 * 2",
            "7 + 8 * (2 + (5 + 7 + 3 + 9 * 8 + 8) * (2 * 9 * 7) + 3 + 4) * 8 + 5 + 2",
            "5 + 2 * (5 * 7 * 6 * 4 * 2 + (7 + 2 + 7 + 9 + 4))",
            "6 * 8 * 7 * 8 * 9 + 9",
            "5 + 8 + 7 * 5 * (8 * 8 * 5 + 7 + 9) + 6",
            "9 + 2 * 3 * 5",
            "8 * 5 + (2 + (4 + 9 + 5 * 6 + 8) + 9 * (4 + 4 * 5 * 3) * (5 * 7 * 8 + 3 * 3 + 3) + 5)",
            "7 + 3 + (2 * 2 + 5 * 8 + 3) + (8 + 3 + (6 * 5 + 4 * 5))",
            "6 * ((2 * 6 + 6 * 2 + 5 + 4) * 8 + 8 * 9) * (5 * 2 + 4 + 6 * 3) + ((6 + 8 + 8 + 6 + 7 * 6) + 8 * 9 * 2 * 2 * (8 + 3 + 7 * 5 * 3)) * ((5 + 9) * 4) + 4",
            "(3 * 8 * 5) + 8 + (3 + 7 + 2 * 3 * 8) * 5",
            "7 + 3 * 9 + (2 * (2 + 9 + 9 + 8 + 9) * (8 * 6)) * 4 * 9",
            "7 + 9 + (3 + 7 + 2 + 6)",
            "4 * (6 + (3 + 6 + 3) * (9 * 7 * 4 + 3 + 4) + 8 * 7 + 4)",
            "((9 + 6) * 3 + 2 * 5) + (6 * 5 + 4 + 3)",
            "3 + (4 * (2 + 4 + 4 + 2)) * 4 * 7 + 5 + 5",
            "(5 * 9 * 2 * (7 * 9 * 8) + 2) + 6 + 2 + 8 + 9",
            "5 + 4 * 4 + (2 * 3 + 8 + 8) * 6 * (9 * 8 + (8 * 9 * 5) + 9)",
            "3 * 5 * (8 + 3 + 7) + 4 + 6",
            "6 + 7 * (9 + (2 + 7 + 2 * 2)) * 3",
            "(9 * (4 * 3)) + 9 * 4 + (9 * 5 + 5 * (6 * 2 + 8 * 8) + 2) + 9 + 8",
            "6 * 7 + 7",
            "7 + (9 * 6 * 8 + 9 * 2) * 4 * (9 * 4 * 6 + (8 * 5 * 8)) * 7",
            "8 + 5 + ((8 + 2 * 6) + (9 * 3 * 8)) + 7",
            "4 * 8 * (6 + (4 + 5) + 5 * 3)",
            "(3 * 2 + 6) + 3 + 3 + 8 * 6 * 7",
            "9 * 3 * 3 + (4 * (6 + 3) * 4) + 2 * 9",
            "5 + 9 + 7 + 4 * (9 * 3)",
            "((8 * 9) + (7 + 5 + 6) + 3 * (5 + 7 + 6)) + 5 + (3 * 8 * 3) * 2",
            "9 + 6 * 5 * ((4 * 4) + 7 * 3) + (3 * 6)",
            "7 + (8 + 7) + 4 * (3 + 3) * 7 * 9",
            "((6 + 7 + 4 + 7) * 7 + 9 + (9 * 7 + 5 + 7 + 7) + 9 + (7 + 3 + 2 * 6 + 9)) + 2 + (4 * 7 + 9 * 3 * 2 * (5 + 9 + 3)) * 5",
            "9 * (3 + (9 * 9)) + 9 * 8 + 4 * 2",
            "(8 * 8 + 6 + 9 + 8 + 2) + 6 * 5 + 5 * 4",
            "3 + 3 + 4 * (6 * 6) + 2 * 8",
            "(5 * 9) * (8 * (2 + 6 * 9) * 7 + 7)",
            "8 * 5 + (8 + 8 + 8 * 4) + 3 * 8 * (8 + 6 * 3 + 4)",
            "4 * 9 + (5 * (8 * 3) + 4) * 5 + (3 * 3)",
            "(2 + 2 * 4 * 3) + 8 * ((2 * 6 + 5 + 6 * 2) * 3) + 2",
            "((5 * 4 + 2 + 7 * 6) + (7 * 5 + 4) + 9 + 7 + 7) + 3",
            "2 + 3 + 9 * 9 + (9 * (2 + 8 + 7) * 3)",
            "3 * 7",
            "(4 + 2 * 5) + 2",
            "5 * 5 * (5 + (8 + 8 + 8) + 3 * 2 * 4) * 9 * 2 + 8",
            "4 + 5 * 3 * 5 + (4 + (3 + 8 + 4) + 7) + 7",
            "(4 + 7 + 6 + 2 * 7) + 7",
            "4 * 2 * 4",
            "(4 * 4 + (6 * 6 * 7 * 2) * 4 * 6 * 7) * ((9 + 5 + 9) + 8) * (5 + 8 + 2 + (9 + 8 * 2 + 9 * 8) * 8 + 3) * 6",
            "5 + 8 * 9 + ((7 * 9 * 3 * 7) * 2 + (2 + 2 + 3 * 6 + 6) + 5 + 4)",
            "3 * 8 + 2 + (7 + 8 + (8 + 7 + 7 * 6 + 2) + (3 + 2) + 5)",
            "4 + 4 * 6 * 5",
            "4 * 9 * ((9 + 2) + 4 + 2 * 5) * ((6 * 9 * 5 + 8) * (7 + 7)) * (8 * 7 + 9 + 7 * (2 + 9 + 9 + 4 + 8) + 9) * 6",
            "(8 * (2 + 3 + 7 * 3 + 2) * 2 * 4 + 7) + 4 + 3 * 2",
            "(6 + (2 * 5 + 3 * 2 * 4 * 7)) * 6 + 4 + 6 + 9 + 9",
            "(8 + 8 * 6 * (4 + 3 + 4 + 8 * 2 * 4) + 7) + 2",
            "8 + 9",
            "8 + 8 * 4 + 4 * ((9 * 2) + 2)",
            "(3 + 3 + 9 * 9 + 5 * 2) + 5 + 7",
            "2 + (7 * 5 * 2)",
            "8 + (5 + 3 + 8 * (3 + 2) * 6) + 9 * 9 * 8 * 9",
            "8 + (2 * 5 + (9 * 7 * 4 * 2) * (7 * 4) * 4 * 6) * 9 + 3",
            "4 * 7 + 4 * 4 * (2 + (2 * 8 + 2 * 5 + 2) * 7)",
            "8 * 5 + 8 + (6 * 9 * 8 * 2 + 5 + (4 * 5 + 4 + 3 + 3)) + 4",
            "9 + 9 * 2 * 9 + (5 + 2 + 6 + 3 * (5 * 2 + 8 * 9 + 6 + 7))",
            "4 * 9 + 2",
            "4 + 4 * (3 + (4 + 9 * 8 * 7 * 3 * 3) * 2 + 9) + (2 * 7) + 8",
            "((5 + 8 + 5 * 2 * 5 * 3) * 5 * 6 + 2) + (5 * 9 * 6 + 2 * (4 + 8 + 9 * 9 * 8 * 3) * 2) + (8 * 6 + 2)",
            "3 + 7 + (9 * (2 * 6 + 3) + 4) * (3 + 4 * 8)",
            "((2 * 2 + 5 * 6 + 7 * 2) * 5 + 9 + 6) * 5",
            "(8 * 6 * (3 + 8) + 9 + 7 * 5) * 3 * 2 * 3 * 5 * 5",
            "((2 + 9 * 4 + 8) * (5 + 5 + 6) * 6 + 9 * 8 + (6 + 9)) * (9 + 8) * 6 * 6 + 9 + 7",
            "(6 * 5 * 6 * 5 * 3) * 6 * 9 * 9",
            "(5 * 4 * (5 * 3 * 3) * (5 + 6 + 2 + 2 * 9 * 3)) + (3 + 6 * 3 * 3 + 3 * (8 * 5 + 3)) * (9 + 3 * 9) + (7 + 4 + 3 * 8 * 8)",
            "(4 + (9 + 2 * 3 + 9 + 6) + 2) + 2 * 7 * 5",
            "9 + 8 + (3 + (7 * 7 + 2 * 8 + 6 * 2) * 8 * 6 * (9 + 7 + 4))",
            "(7 + 3) * 7 * (4 + 4 * (2 + 3 + 4 + 6) + 7) + 6 + 2",
            "(8 * (5 * 9 * 6) * 3 * (7 * 5)) + 5 + 3",
            "(2 * 6 + (7 + 5) * 7 + 3) * 5 + 3 * 2",
            "((9 + 4) * 6 * 2 * 3 + 6) * ((2 + 6 + 4 * 7 + 4 * 7) * (7 + 9 + 2) * 2) + 7 * 2",
            "3 * (9 + 9 + 5 + (9 + 7 * 7 + 8 + 2 + 6) + (9 * 8 + 8 * 8 * 7) * 3) + (7 + 9 * 4 + (6 + 4) + 2) + 9",
            "9 + (2 * 5 + 9) + 9 + 7",
            "3 * 9 + ((2 + 4 * 4) * 3 + 5 * 3 * 5 + (4 + 8 * 3 * 4)) + 6 * 5",
            "3 + (7 * 2 + (4 + 6 * 6)) * 2 + (4 * 5 + 2 + 6 + (7 * 6 + 6 + 7)) * 6 + 9",
            "6 + 5 * (3 + 5 + 2 + (9 + 6 * 3) + 3 + 7) * 3",
            "4 * ((4 + 4 * 8 + 7 + 2 + 4) * (4 + 4 + 8 * 4 + 4 + 3) + 9 * (6 * 4 * 9 * 9) * 2 * (6 + 6 * 9 * 3 + 4)) + 7",
            "9 + 8",
            "7 + (9 + (5 * 6 * 5 * 3 * 3))",
            "7 * 9 + 4 + 6 + ((9 * 2 + 9) * 7 * 9) + 6",
            "((8 + 7 * 8 * 6 * 9 + 2) + 4 + 6 * 9 * (5 * 6 * 9 * 8) * 7) * 5 + 5",
            "2 + 2 * (4 + 3 + 6 + 4 + 5) * (7 * 5 * 5 * 6 + 4 + (6 * 8 * 4 + 7))",
            "(3 + (9 + 2 * 3)) + 2 * 7",
            "(5 + 8 * 5 * (9 * 6 + 4 * 6 + 5)) + 5 * ((3 * 9 + 7) + 9 + (2 * 6 * 4 * 3 + 4 * 4) + 7 + (5 * 4 * 9 + 9 * 7) * 5)",
            "((7 + 2 * 5 * 3) + 4) * 8",
            "6 * (3 + 7 * (2 + 6) + 6 + (9 * 8 * 7) * (5 * 4 + 7 + 8 * 8)) + 6 * 6",
            "(6 + 9 * (2 + 2 * 2 * 3 * 7 + 8) * 3 * 5 * 4) + 2",
            "5 + 2 + (9 + 4 * 7 + 3 + 8) * (4 + 8 * (3 + 2 * 7 * 4)) + 8 + (4 + 5)",
            "(8 * 9 + 9 + 4 * 5) + 2 * 2 * 9 + (3 + 9) + 5",
            "4 * 7 + ((5 + 7) * 3) * 9 * 9",
            "6 + 6 * 4 * ((8 + 9 * 7 * 3 + 9 * 8) + 4) * 3 * 4",
            "4 * (6 * (9 * 9 + 4 * 2 * 3) * 2) + 8 * 5 * 3",
            "7 + 4 * (8 * 2 * 2 * 3 * 8 * 8) * 7 + 2 + 5",
            "8 * ((2 * 3 * 5 * 9 * 2 + 6) * 4 * (7 + 3 * 4 + 7 * 5 + 5) * 3) * 7 + ((9 + 8 + 5) * 8 * (5 * 8 * 9 + 3 + 9) * 5)",
            "5 * (7 + 2 + 9) + 9 * (5 + 8) + 3 * 6",
            "6 * ((9 * 5 + 7) * (8 + 9 + 9 * 7 + 3 + 4))",
            "((7 + 2 * 6 * 5) * 7 + 2) * 8 * 7",
            "9 + ((7 + 8 * 9 * 4 * 4 + 6) + 8) * (9 + (7 + 2 + 6 * 3))",
            "(3 + 6 * (6 * 9 * 4)) + 6 + 5 * 9 + (4 * 6 * 8) * ((7 + 2 * 9 * 4 + 4) + 9 + (6 + 2) + 5)",
            "2 + 4 + 6 + 2 * ((8 * 3 * 2 + 7 * 6 + 3) + 4 + 5 + 5 * 5)",
            "6 + ((6 * 5 * 3 + 9) + (7 + 7 * 8 + 9 * 7 + 6))",
            "(9 + 3 * 3 + (6 * 4 * 2 * 9 + 7 + 4) * 2) * 9 * 2",
            "4 * ((8 + 4) * 2) * (7 + 6 + 3)",
            "9 * 2 + (9 + (7 * 4) * 9 + 8 + (4 + 4) + 7) + (6 * 6 * 3 * 3) * ((9 * 4) * 5 * (6 + 3 + 8) + 5 * 7) + 2",
            "5 + ((9 + 3 + 4 + 2) + (5 + 3) + (4 * 2)) * 7",
            "(8 * 7) + 9 + 6 + 7 * 9 * ((5 + 8 + 5 * 5 + 7 + 2) * 2 + 6)",
            "(9 * 3 * 6) * 4 + 5 * 4 * 3",
            "5 * ((7 + 4 * 5 + 8) + 2) * 9 + 3",
            "2 * 2 + ((2 * 2) * (7 * 5 * 6 + 9)) * 2",
            "4 + ((5 * 5 + 2 + 2) * 3 * 6 + (4 * 3 * 3 + 4 + 7)) * 3 + 3 + (4 + (6 + 9) + 4 + 6 * (2 * 3) * (5 + 8 * 2 * 8)) + 9",
            "2 * 9 + 5",
            "2 + ((6 + 7 + 9) * 9 + 9) + 9 * 5",
            "2 + 7 * (9 * 7 + (6 + 5 + 2)) + 8 + 5",
            "3 * (7 * 4 + 8 * 8 * 6 * 8) + 5 + 2",
            "8 + (5 * 2 * 3 + 5 + 8 * 3) * 3 * (9 * (2 + 8) * (7 + 3 + 5 + 4 * 9) * 6 + 5 + (8 + 9)) + 4 + 3",
            "4 + 7 * ((8 * 5 * 2) + 3) + 2",
            "4 + 6",
            "(5 * (7 * 6 + 3 + 4) + 9 + (8 + 9) + (5 * 6) * 4) * 8",
            "6 + ((7 + 5 + 7 * 3 + 8 + 3) * 5 * 2 * 4 + 5 + 4)",
            "5 + 4 + ((6 + 6 + 5 + 7 * 8) * (2 + 4 * 3 * 8 + 3) + (4 + 3) + 2) + 9",
            "7 * 3 + 6 + 6 * 4 * 6",
            "(4 * 9 + 2 + 4 + 9) * 6 + 6 * (4 * 9 * (6 * 9 * 3 * 6 * 2 * 7) + 5 + 3 * 3) + 3 * 8",
            "(5 + (4 * 8) + (5 * 5)) + (2 + 5 * 8)",
            "9 + 3 * 3 * 8 + (3 + 4 * 2 + (6 * 7 * 2 + 4 + 6 * 9) * 4) * 3",
            "3 * 6 + 2 + (8 * 6 * 6 + 8 + 8) * ((7 + 3 * 4 * 5) * 4 + 9 * (7 + 4 + 5 * 9 + 8 + 3) * (7 * 8 * 5 + 5 + 7 + 6)) + 4",
            "6 + 4 + (5 + 7 * 6)",
            "5 + 3 * 8 + 6 + 3",
            "6 + 2 + 9 + 8 + (7 + (8 + 2 * 8 + 3 + 8) * 8) * (8 * 8 * (7 + 9 * 2 + 7 * 4) * 4 + (7 + 6 + 7 * 4 + 5))",
            "3 + 8 + 4 + (8 + 7) * ((7 + 5) + 8 + 4 + (9 * 7 * 8 * 6) + (7 + 6 + 8 * 3)) + 5",
            "4 + 2 + 6 * (8 + 2 * 2 * 7) * 2 * 8",
            "2 + 6 * 4 + 6 + (8 + 4 + 6 * 8 + (6 + 4 * 9 * 8 * 3 + 6) * (3 * 5 * 2 + 2 + 7 * 2)) * 3",
            "6 + 6 * 4 + ((9 * 8 * 5) * 4 * 9 * (2 + 9 * 4 + 8 * 8) * 7)",
            "3 * 3 + (2 + 9 * 6 + 3) * ((3 + 2 * 2 + 8 * 8 * 3) + 8 * 9) * 4 + 9",
            "(2 * 7 + 2 * 2) * 8 + 6",
            "5 + (3 + 9 + 3 + 9 * 4 + 6) + 3 * 7 * 5 * 5",
            "((9 + 7 * 4 * 5 + 6 * 8) + 5 * 3 * (2 * 7 + 3 + 5 * 4 + 9)) * 5 * 8",
            "7 + 2 + (5 + (8 + 2 * 2 * 9 + 6) * 4 + 2 * 5) * 3 + 5",
            "7 + (8 + 6 * (9 + 6 * 3 * 9 * 8 + 7))",
            "7 + 2 + 7 * (9 + 4 + 3 * 3 + 9)",
            "7 + ((5 + 7 * 4 * 3) + 4 * (9 * 5 + 2 * 5 * 6 + 2)) * 3 * ((3 + 3 + 4 + 8) * (4 * 5 * 7 * 4 + 9) + 8 + 3) * 7",
            "(3 * 9 * 8 + 8 + (5 * 3 + 6 * 3 + 2) + (8 + 9 + 3)) * 5 * 4 * 4 * 3",
            "9 * 6 + (9 * 6 + 3 * (7 * 4 * 2 + 9) + 3)",
            "(3 + 6 * (6 * 5 * 8 * 9) + (7 + 5 * 5 + 5 + 8 * 8)) * 6 + (9 + 8 + 7 * 5 + (8 + 3 * 4 + 8 * 9) * 7) * 8 + 6",
            "(9 * 7 + (4 * 8 + 9 + 6) * 3 * 7 * (9 * 7)) + (5 * 9 * (3 * 4 * 7 + 6) * (8 * 9 + 5 + 2 + 9))",
            "5 * (8 * 3) + 9 * ((8 * 3 * 4) * (6 * 2) * 3 + 6 * 6 * 8) * ((2 * 3 * 6 + 4 * 2 + 5) * 8 * 6 * 2)",
            "3 + (4 * (6 + 5 * 3 + 9 + 3) * 2 * (8 + 7 * 8 * 7 + 5) * (8 + 8)) + (8 * 5 + 8 + 6 * 9 * 4) + 8 * 4 + 3",
            "(3 * 6 * 7 * (3 + 7 * 4) * 8 * 8) * 5 + 6 * 6 + (4 * (9 + 5 * 8 * 9 * 6 * 6) * 3) + ((7 * 8 * 6 + 2 + 5 * 6) * 2 + 3 + 5 * (3 * 8) + 6)",
            "(2 + 4 * 9) + (7 + 2 + 7 * 7 * (3 + 8 * 4 + 2) * (7 + 5)) * 9 * 7",
            "4 + (8 + 2 + 5 + 2 + 9 + 4) + 7 + 6 * 4",
            "3 * 8 + (8 + 5) * (7 + 5 + 6)",
            "5 + (5 + (7 + 5)) * 8 * 6 * ((9 + 3 * 2 * 5 + 2 + 9) * 2 + 5 + 3 * 6) * ((2 + 2 * 9) * 6 * 8 * 7 * (4 * 5) * 6)",
            "7 + 3 * 6 + ((5 + 2 + 6 + 5 + 5 * 4) * 4 * 9)",
            "5 * 4 + 8 * 3",
            "(8 + 6 * 6 + 5) + 9 + (6 + 3) + 7 + 6"
        };

        #endregion Data
    }
}
